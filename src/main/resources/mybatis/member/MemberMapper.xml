<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.heartlink.member.model.mapper.MemberMapper">

    <!-- 회원가입: MemberDto 객체의 필드를 사용하여 INSERT -->
    <insert id="setSignUp">
        INSERT INTO BASIC_USER (
        BASIC_USER_EMAIL,
        BASIC_USER_PWD,
        BASIC_USER_NICKNAME,
        BASIC_USER_NAME,
        USER_ADDR,
        BASIC_USER_TELNUM,
        BASIC_USER_BIRTHDATE,
        BASIC_USER_SEX
        ) VALUES (
        #{memberDto.email},
        #{memberDto.password},
        #{memberDto.nickname},
        #{memberDto.name},
        #{memberDto.address},
        #{memberDto.phoneNumber},
        #{memberDto.residentNumber},
        CASE
        WHEN #{memberDto.gender} IN ('1', '3') THEN 'M'
        WHEN #{memberDto.gender} IN ('2', '4') THEN 'F'
        ELSE NULL
        END
        )
    </insert>

    <select id="setUserNo" resultType="java.lang.Integer">
        SELECT BASIC_USER_NO
        FROM BASIC_USER
        WHERE BASIC_USER_EMAIL = #{userEmail}
    </select>

    <insert id="setLocation">
        INSERT INTO BASIC_USER_LOCATION VALUES(
            #{memberDto.userNumber},
            #{memberDto.latitude},
            #{memberDto.longitude}
        )
    </insert>


    <!-- 이메일 중복 체크: 주어진 이메일로 USER 테이블에서 COUNT(*)를 수행 -->
    <select id="duplicateEmail" resultType="int">
        SELECT COUNT(*)
        FROM BASIC_USER
        WHERE BASIC_USER_EMAIL = #{email}
    </select>

    <!-- 닉네임 중복 체크: 주어진 닉네임으로 USER 테이블에서 COUNT(*)를 수행 -->
    <select id="duplicateNick" resultType="int">
        SELECT COUNT(*)
        FROM BASIC_USER
        WHERE BASIC_USER_NICKNAME = #{nickname}
    </select>

    <!-- 로그인 -->
    <select id="findByEmail" parameterType="String" resultType="com.heartlink.member.model.dto.MemberDto">
        SELECT
        BASIC_USER_NO AS userNumber,
        BASIC_USER_EMAIL AS email,
        BASIC_USER_PWD AS password,
        BASIC_USER_NICKNAME AS nickname,
        BASIC_USER_NAME AS name,
        USER_ADDR AS address,
        BASIC_USER_TELNUM AS phoneNumber,
        BASIC_USER_BIRTHDATE AS residentNumber,
        BASIC_USER_SEX AS gender,
        BASIC_USER_STATUS AS status
        FROM BASIC_USER
        WHERE BASIC_USER_EMAIL = #{email}
    </select>

    <!-- 어드민 이메일로 조회 -->
    <select id="findAdminByEmail" resultType="com.heartlink.member.model.dto.AdminDto">
        SELECT
        ADMIN_USER_NO AS adminUserNo,
        ADMIN_USER_EMAIL AS email,
        ADMIN_USER_PWD AS password
        FROM ADMIN_USER
        WHERE ADMIN_USER_EMAIL = #{email}
    </select>

    <insert id="saveToken">
        INSERT INTO user_tokens (token_id, user_no, access_token, refresh_token, create_date)
        VALUES (TOKEN_SEQ.NEXTVAL, #{userNumber}, #{accessToken}, #{refreshToken}, CURRENT_TIMESTAMP)
    </insert>

    <select id="findTokenByUserNumber" resultType="java.lang.String">
        SELECT access_token
        FROM user_tokens
        WHERE user_no = #{userNumber}
        AND delete_date IS NULL
    </select>

    <update id="updateLastLoginDate" parameterType="String">
        UPDATE BASIC_USER
        SET LAST_LOGIN_DATE = CURRENT_TIMESTAMP
        WHERE BASIC_USER_EMAIL = #{email}
    </update>

    <select id="findByNameAndBirthdate" parameterType="map" resultType="com.heartlink.member.model.dto.MemberDto">
        SELECT
        BASIC_USER_EMAIL AS email
        FROM BASIC_USER
        WHERE BASIC_USER_NAME = #{name}
        AND BASIC_USER_BIRTHDATE = #{residentNumber}
    </select>

    <select id="getTopUserList" resultType="com.heartlink.member.model.dto.MemberDto">
        SELECT LIKED_USER_NO as userNumber, COUNT(*) AS likeCnt
        FROM USER_LIKES ul
                 JOIN BASIC_USER bu
                      ON ul.LIKED_USER_NO = bu.BASIC_USER_NO
        WHERE BASIC_USER_STATUS = 'ACTIVE'
        GROUP BY LIKED_USER_NO
        ORDER BY likeCnt DESC
            FETCH FIRST 3 ROWS ONLY
    </select>

    <select id="getUserDetail" resultType="com.heartlink.member.model.dto.MemberDto">
        SELECT b.BASIC_USER_NICKNAME AS nickname,
            LISTAGG(DISTINCT hc.HOBBY_NAME, ', ') WITHIN GROUP (ORDER BY hc.HOBBY_NAME) AS hobbyName,
            LISTAGG(DISTINCT CASE WHEN pc.PERSONAL_TYPE = 'L' THEN pc.PERSONAL_NAME END, ', ') WITHIN GROUP (ORDER BY pc.PERSONAL_NAME) AS personalLike,
            LISTAGG(DISTINCT CASE WHEN pc.PERSONAL_TYPE = 'H' THEN pc.PERSONAL_NAME END, ', ') WITHIN GROUP (ORDER BY pc.PERSONAL_NAME) AS personalHate,
            bp.PHOTO_NAME as userPhotoName,
            bp.PHOTO_PATH as userPhotoPath,
            b.BASIC_USER_SEX as gender
        FROM BASIC_USER b
            LEFT JOIN BASIC_USER_HOBBY buh ON b.BASIC_USER_NO = buh.BASIC_USER_NO
            LEFT JOIN HOBBY_CATEGORY hc ON buh.HOBBY_NO = hc.HOBBY_NO
            LEFT JOIN BASIC_USER_PERSONAL bup ON b.BASIC_USER_NO = bup.BASIC_USER_NO
            LEFT JOIN PERSONAL_CATEGORY pc ON bup.PERSONAL_NO = pc.PERSONAL_NO
            LEFT JOIN BASIC_USER_PHOTO bp ON b.BASIC_USER_NO = bp.BASIC_USER_NO
        WHERE b.BASIC_USER_STATUS = 'ACTIVE'
            AND b.BASIC_USER_NO = #{userNo}
        GROUP BY b.BASIC_USER_NO,
            b.BASIC_USER_NICKNAME,
            bp.PHOTO_NAME,
            bp.PHOTO_PATH,
            b.BASIC_USER_SEX
    </select>
    <!--  비밀번호 변경  -->
    <update id="updatePassword">
        UPDATE BASIC_USER
        SET BASIC_USER_PWD = #{password}
        WHERE BASIC_USER_EMAIL = #{email}
    </update>

    <!-- 휴면 계정을 ACTIVE로 업데이트하는 쿼리 -->
    <update id="updateUserStatusToActive" parameterType="String">
        UPDATE BASIC_USER
        SET BASIC_USER_STATUS = 'ACTIVE'
        WHERE BASIC_USER_EMAIL = #{email}
    </update>
</mapper>
